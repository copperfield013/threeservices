package com.abc.rule.worktask.ipm

import com.abc.rrc.record.Attribute;
import com.zhsq.biz.constant.CommonAlgorithm;
import com.zhsq.biz.constant.family.FamilyItem;
import com.abc.fuse.improve.attribute.FuseAttribute;
import com.abc.model.enun.ValueType;
import com.zhsq.biz.constant.EnumKeyValue;
import com.abc.fuse.improve.attribute.label.FuseLabelAttribute;
import com.zhsq.biz.people.algorithm.BirthdayIntrospection;
import com.zhsq.biz.common.CommonCalculation;
import java.util.Date;
import com.abc.rrc.factory.DBAttributeFactory;
import com.zhsq.biz.constant.people.PeopleItem;
import com.zhsq.biz.constant.DateUtils;
import com.abc.fuse.improve.attribute.leaf.FuseLeafAttribute;
import com.zhsq.biz.constant.BaseConstant;
import com.abc.ops.builder.RecordRelationOpsBuilder;
import com.zhsq.biz.constant.RelationType;
import com.zhsq.biz.constant.worktask.WorkTaskItem;
import com.abc.transfer.builder.IRootRecordBuilder;
import com.abc.transfer.builder.RootRecordBuilderFactory;
import com.abc.rrc.record.RootRecord;
import com.abc.sysdate.SystemDateTimeManager;
import com.abc.fuse.improve.attribute.FuseLeafAttrFactory;
import com.abc.relation.RelationCorrelation;
import com.abc.relation.RecordRelation;
import com.abc.fuse.improve.attribute.OpsAttribute;
import com.zhsq.biz.people.algorithm.IDIntrospection;
import com.abc.fuse.improve.attribute.leaf.OpsLeafAttribute;
import java.util.Collection;
import com.zhsq.biz.worktask.algorithm.TaskIntrospection;
import com.zhsq.biz.common.OutputDisplay;


global java.lang.String hostCode; 
global java.lang.String hostType;

global java.lang.String userCode;
global java.lang.String recordCode;
global java.lang.String recordName;

global java.util.List attributeList;
global java.util.List addedLabelList;
global java.util.List removedLabelList;
global java.util.List addedLabelList;
global java.util.List addedLeafAttrList;
global java.util.Map removedLeafAttrMap;
global com.abc.rrc.record.RootRecord rootRecord;
global  com.abc.ops.builder.RecordRelationOpsBuilder recordRelationOpsBuilder;
global com.abc.complexus.RecordComplexus recordComplexus;

rule "新建任务设置"
	salience 20 
when
	 FuseAttribute( name==WorkTaskItem.任务状态, getValue(ValueType.INT)==EnumKeyValue.ENUM_任务状态_新建);
then 
	//超时任务为否
	 Attribute attribute=DBAttributeFactory.newInstance(WorkTaskItem.任务是否超时,EnumKeyValue.ENUM_是否_否);
	attributeList.add(attribute);
	//设置任务创建时间
	Attribute attributeTime=DBAttributeFactory.newInstance(WorkTaskItem.创建时间,SystemDateTimeManager.getCunrrentTime());
	attributeList.add(attributeTime);
end

rule "发布任务到任务大厅"//任务需要领用，建立用户和任务的领用关系
	salience 10 
when
    $nameFA: FuseAttribute( name==WorkTaskItem.是否需要领用, CommonCalculation.isBasicLawful(getValue(ValueType.STRING)), getValue(ValueType.INT)==EnumKeyValue.ENUM_是否_是)
	FuseAttribute(name==WorkTaskItem.类型,  CommonCalculation.isBasicLawful(getValue(ValueType.STRING)),$pTypeValue:getValue(ValueType.INT))
	not RecordRelation( type==RelationType.RR_工作任务_任务执行人_用户);
then 
	 Collection<String> codes=TaskIntrospection.taskMatchingUser((Integer)$pTypeValue);
		if(codes!=null){
			for(String code:codes){
				recordRelationOpsBuilder.putRelation(RelationType.RR_工作任务_可领用人_用户,code);
			}
		}
end

rule "归档任务"
	salience 9
when
    FuseAttribute( name==WorkTaskItem.归档废弃, getValue(ValueType.INT)==EnumKeyValue.ENUM_归档废弃_归档);
	FuseAttribute( name==WorkTaskItem.任务状态, getValue(ValueType.INT)!=EnumKeyValue.ENUM_任务状态_归档);
then 
  	Attribute gd =  DBAttributeFactory.newInstance(WorkTaskItem.任务状态, EnumKeyValue.ENUM_任务状态_归档);
  	Attribute gdVg =  DBAttributeFactory.newInstance(WorkTaskItem.归档废弃, null);
  	Attribute gdtime =  DBAttributeFactory.newInstance(WorkTaskItem.归档时间, SystemDateTimeManager.getCunrrentTime());
	attributeList.add(gd);
	attributeList.add(gdVg);
	attributeList.add(gdtime);
end

rule "废弃任务"
	salience 9
when
    $gdVf:FuseAttribute( name==WorkTaskItem.归档废弃, getValue(ValueType.INT)==EnumKeyValue.ENUM_归档废弃_废弃);
	$task:FuseAttribute( name==WorkTaskItem.任务状态, getValue(ValueType.INT)!=EnumKeyValue.ENUM_任务状态_废弃);
then
	Attribute task =  DBAttributeFactory.newInstance(WorkTaskItem.任务状态, EnumKeyValue.ENUM_任务状态_废弃);
  	Attribute gdVf =  DBAttributeFactory.newInstance(WorkTaskItem.归档废弃, null);
  	
	attributeList.add(task);
	attributeList.add(gdVf);
end

rule "认领任务设置任务执行人"//并删除可领用关系
	salience 10 
when
	FuseAttribute(name==WorkTaskItem.是否认领任务,CommonCalculation.isBasicLawful(getValue(ValueType.STRING)),getValue(ValueType.INT)==EnumKeyValue.ENUM_是否_是);
    not RecordRelation( type==RelationType.RR_工作任务_任务执行人_用户 , userCode.equals(right));
    RecordRelation( type==RelationType.RR_工作任务_可领用人_用户 , userCode.equals(right));
then 
	recordRelationOpsBuilder.putRelation(RelationType.RR_工作任务_任务执行人_用户,userCode);
	recordRelationOpsBuilder.removeRelation(RelationType.RR_工作任务_可领用人_用户, userCode);
	
	Attribute attribute=DBAttributeFactory.newInstance(WorkTaskItem.是否认领任务,EnumKeyValue.ENUM_是否_否);
	attributeList.add(attribute);
end

rule "智能匹配"
	salience 10
	when
		FuseAttribute(name==WorkTaskItem.是否智能匹配,CommonCalculation.isBasicLawful(getValue(ValueType.STRING)),getValue(ValueType.INT)==EnumKeyValue.ENUM_是否_是)
		FuseAttribute(name==WorkTaskItem.类型,  CommonCalculation.isBasicLawful(getValue(ValueType.STRING)),$pTypeValue:getValue(ValueType.INT))
	then 
		OutputDisplay.showText("智能匹配执行中。。。。。" + $pTypeValue);
		Collection<String> codes=TaskIntrospection.taskMatchingUser((Integer)$pTypeValue);
		if(codes!=null){
			for(String code:codes){
				recordRelationOpsBuilder.putRelation(RelationType.RR_工作任务_任务执行人_用户,code);
			}
		}
end
